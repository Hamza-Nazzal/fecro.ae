// src/components/rfq-form/ReviewStep.jsx
import React from "react";
import { formatDMY, addDays } from "../../utils/date";

/** Helper: consistent item name resolution (same behavior as your ReviewStep) */
function getItemName(it) {
  return it?.productName || it?.name || it?.title || "Item";
}

/** Helper: normalize specs from array or object shape (same behavior as your ReviewStep) */
function toSpecList(specs) {
  if (!specs) return [];
  if (Array.isArray(specs)) {
    return specs
      .map((s) => {
        const label = (s?.key_label || s?.key_norm || s?.label || "").trim();
        const value = s?.value;
        const unit  = (s?.unit ?? "").toString().trim();
        if (!label || value === undefined || value === null || String(value).trim() === "") return null;
        const display = unit ? `${value} ${unit}` : String(value);
        return { label, display };
      })
      .filter(Boolean);
  }
  // object map { key_norm: { key_label, value, unit } }
  return Object.entries(specs)
    .map(([key, s]) => {
      const label = (s?.key_label || key || "").trim();
      const value = s?.value;
      const unit  = (s?.unit ?? "").toString().trim();
      if (!label || value === undefined || value === null || String(value).trim() === "") return null;
      const display = unit ? `${value} ${unit}` : String(value);
      return { label, display };
    })
    .filter(Boolean);
}

export default function ReviewStep({
  items = [],
  orderDetails = {},
  meta = {},
  groupByCategory = false,
}) {
  // ----- Logic preserved from your ReviewStep -----
  const issuedAt  = meta.issuedAt || new Date();
  const validDays = Number(meta.validDays ?? 14);
  const deadline  = addDays(issuedAt, validDays);

  const city    = meta.location?.city || "—";
  const emirate = meta.location?.emirate || "—";
  const country = meta.location?.country || "—";

  const rfqId = meta.publicId || meta.rfqId || "RFQ-—";

  const deliveryTimeline =
    (orderDetails.deliveryTimelineLabel ?? orderDetails.deliveryTimeline) ?? "Standard";

  const deliveryTerms =
    (orderDetails.deliveryTermsLabel ??
     orderDetails.incotermsLabel ??
     orderDetails.deliveryTerms ??
     orderDetails.incoterms) ?? "—";

  const paymentTerms =
    (orderDetails.paymentTermsLabel ?? orderDetails.paymentTerms) ?? "Net-30";

  // Grouping (pure, memoized)
  const groups = React.useMemo(() => {
    if (!groupByCategory) return [["All Items", items]];
    const map = new Map();
    for (const it of items) {
      const key = it?.categoryPath || it?.category_path || "—";
      const arr = map.get(key) || [];
      arr.push(it);
      map.set(key, arr);
    }
    return Array.from(map.entries());
  }, [items, groupByCategory]);

  const totalUnits = items.reduce((sum, it) => sum + Number(it?.quantity ?? 0), 0);

  // ----- T4 UI (wrapped around the logic above) -----
  return (
    <div className="font-sans max-w-5xl mx-auto bg-white shadow-2xl">
      {/* Header */}
      <div className="bg-blue-50 border-b-4 border-blue-600">
        <div className="px-10 py-8 text-center">
          <div className="text-sm font-medium text-gray-500 uppercase tracking-wide mb-2">
            Request for Quotation
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">{rfqId}</h1>
          <div className="text-xs text-gray-600">
            Generated by: <strong className="text-blue-700">Fecro.ae</strong>
          </div>
        </div>
      </div>

      {/* Main */}
      <div className="px-10 py-8">
        {/* 1. RFQ Overview */}
        <div className="mb-10 p-6 border border-gray-200 rounded-lg">
          <h2 className="text-lg font-bold text-gray-900 uppercase tracking-wide mb-4 border-b pb-2">
            1. RFQ Overview
          </h2>
          <div className="space-y-1 text-base">
            <div className="flex justify-between border-b border-gray-100 py-3">
              <span className="font-medium text-gray-600">RFQ Valid For</span>
              <span className="font-semibold text-gray-800">{validDays} days</span>
            </div>
            <div className="flex justify-between border-b border-gray-100 py-3">
              <span className="font-medium text-gray-600">Project Location</span>
              <span className="font-semibold text-gray-800">
                {city}, {emirate}, {country}
              </span>
            </div>
            <div className="flex justify-between border-b border-gray-100 py-3">
              <span className="font-medium text-gray-600">Total Line Items</span>
              <span className="font-semibold text-gray-800">{items.length}</span>
            </div>
            <div className="flex justify-between py-3">
              <span className="font-medium text-gray-600">Total Units</span>
              <span className="font-semibold text-gray-800">{totalUnits}</span>
            </div>
          </div>
        </div>

        {/* 2. Requested Items */}
        <div className="mb-10">
          <h2 className="text-lg font-bold text-gray-900 uppercase tracking-wide mb-6">
            2. Requested Items
          </h2>

          <div className="space-y-6">
            {(() => {
              let itemCounter = 0;
              return groups.map(([groupName, groupItems]) => (
                <div key={groupName}>
                  {groupByCategory && (
                    <div className="bg-gray-50 border-l-4 border-blue-600 px-4 py-3 mb-4">
                      <h3 className="text-sm font-bold text-gray-900 uppercase tracking-wide">
                        {groupName}
                      </h3>
                    </div>
                  )}

                  <div className="space-y-4">
                    {groupItems.map((it, idx) => {
                      itemCounter += 1;
                      const specs = toSpecList(it?.specifications || it?.specs || it?.rfq_item_specs);

                      return (
                        <div
                          key={it?.id || `${getItemName(it)}-${idx}`}
                          className="border border-gray-200"
                        >
                          {/* Item Header */}
                          <div className="bg-gray-50 px-5 py-3 border-b border-gray-200 flex justify-between items-center">
                            <div className="flex items-baseline gap-3">
                              <span className="text-xs font-bold text-gray-500 uppercase">
                                Item #{itemCounter}
                              </span>
                              <h4 className="text-lg font-bold text-gray-900">
                                {getItemName(it)}
                              </h4>
                            </div>
                            <div className="flex items-center gap-4">
                              <div className="bg-green-600 text-white rounded-lg px-3 py-1.5 text-center">
                                <div className="text-xs font-medium uppercase">Quantity</div>
                                <div className="text-lg font-bold">
                                  {Number(it?.quantity ?? 0)}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Specs as pills */}
                          <div className="px-5 py-4 bg-white">
                            {specs.length ? (
                              <div>
                                <div className="text-xs font-bold text-gray-500 uppercase tracking-wide mb-3">
                                  Technical Specifications
                                </div>
                                <div className="flex flex-wrap gap-2" role="list">
                                  {specs.map((s, i) => (
                                    <span
                                      key={`${it?.id || idx}-spec-${i}`}
                                      role="listitem"
                                      className="bg-blue-600 text-white rounded-full px-3 py-1 text-xs font-medium"
                                      aria-label={`${s.label}: ${s.display}`}
                                    >
                                      <span className="font-semibold">{s.label}:</span>
                                      <span className="ml-1 font-normal">{s.display}</span>
                                    </span>
                                  ))}
                                </div>
                              </div>
                            ) : (
                              <div className="text-sm text-gray-500 italic">
                                No technical specifications provided
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              ));
            })()}
          </div>
        </div>

        {/* 3. Commercial Terms */}
        <div className="mb-10">
          <h2 className="text-lg font-bold text-gray-900 uppercase tracking-wide mb-4">
            3. Commercial Terms &amp; Conditions
          </h2>
          <div className="border border-gray-200 bg-white">
            <div className="divide-y divide-gray-200">
              <div className="px-5 py-4 flex justify-between items-center hover:bg-gray-50">
                <div>
                  <div className="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">
                    Delivery Timeline
                  </div>
                  <div className="text-sm font-semibold text-gray-900">{deliveryTimeline}</div>
                </div>
              </div>
              <div className="px-5 py-4 flex justify-between items-center hover:bg-gray-50">
                <div>
                  <div className="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">
                    Delivery Terms (Incoterms)
                  </div>
                  <div className="text-sm font-semibold text-gray-900">{deliveryTerms}</div>
                </div>
              </div>
              <div className="px-5 py-4 flex justify-between items-center hover:bg-gray-50">
                <div>
                  <div className="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">
                    Payment Terms
                  </div>
                  <div className="text-sm font-semibold text-gray-900">{paymentTerms}</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* 4. Submission Instructions */}
        <div className="bg-blue-50 border-l-4 border-blue-600 px-6 py-5">
          <h2 className="text-sm font-bold text-gray-900 uppercase tracking-wide mb-3">
            4. Quotation Submission Requirements
          </h2>
          <div className="space-y-2 text-sm text-gray-700">
            <p>
              <strong className="text-gray-900">Deadline:</strong> All quotations must be submitted by{" "}
              <strong className="text-red-700">{formatDMY(deadline)}</strong> via the Fecro platform.
            </p>
            <p>
              <strong className="text-gray-900">Format:</strong> Submit pricing in AED with clear unit prices and total amounts.
            </p>
          </div>
        </div>

        {/* Footer */}
        <div className="mt-8 pt-6 border-t border-gray-200 text-center">
          <p className="text-xs text-gray-500">
            This RFQ is issued via <strong className="text-gray-700">fecro.ae</strong> B2B Marketplace
          </p>
        </div>
      </div>
    </div>
  );
}